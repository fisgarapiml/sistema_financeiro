import sqlite3
import os

# Caminho do banco de dados
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "grupo_fisgar.db")

print(f"üìÅ Usando banco de dados: {DB_PATH}")

conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

cursor.execute("SELECT codigo, fornecedor, comentario FROM contas_a_pagar")
registros = cursor.fetchall()

# Nova fun√ß√£o de classifica√ß√£o com base nos fornecedores reais
def classificar(texto):
    texto = texto.lower()

    if any(p in texto for p in ["mercado livre", "mercado pago", "ebazar.com.br"]):
        return ("Plataforma", "Vari√°vel", "Vendas", "Intermedia√ß√£o Online")

    elif any(p in texto for p in ["livraria fontes", "apostila", "caderno", "material did√°tico"]):
        return ("Materiais Educativos", "Vari√°vel", "Escrit√≥rio", "Treinamento/Estudo")

    elif "reembolso" in texto:
        return ("Reembolso", "Vari√°vel", "Financeiro", "Reembolsos")

    elif "cart√£o mercado pago" in texto:
        return ("Cart√µes", "Vari√°vel", "Financeiro", "Cart√£o Empresarial")

    elif any(p in texto for p in ["wa transportes", "frete de fornecedor"]):
        return ("Log√≠stica", "Vari√°vel", "Entregas", "Frete Flex")

    elif "simples nacional" in texto:
        return ("Impostos", "Fixo", "Fiscal", "Tributos Federais")

    elif "grupofisgar" in texto:
        return ("Transfer√™ncia Interna", "Fixo", "Holding", "Financeiro")

    elif "ki-kakau" in texto:
        return ("Fornecedor - Produtos", "Vari√°vel", "Produtos", "Produ√ß√£o")

    elif any(p in texto for p in ["altamiris", "leticia", "felipe", "yasmin", "yasmim", "julia", "nadia", "simone", "elismar", "diarista"]):
        return ("Colaboradores", "Fixo", "RH", "Pagamento Terceiros")

    elif any(p in texto for p in ["restaurante", "alimenta√ß√£o"]):
        return ("Alimenta√ß√£o", "Vari√°vel", "RH", "Refei√ß√£o")

    return (None, None, None, None)

# Atualiza os registros
atualizados = 0
for codigo, fornecedor, comentario in registros:
    texto = f"{fornecedor or ''} {comentario or ''}"
    nova_categoria, novo_tipo, novo_ccusto, novo_plano = classificar(texto)

    if nova_categoria:
        cursor.execute("""
            UPDATE contas_a_pagar
            SET categorias = ?, tipo_custo = ?, centro_de_custo = ?, plano_de_contas = ?
            WHERE codigo = ?
        """, (nova_categoria, novo_tipo, novo_ccusto, novo_plano, codigo))
        atualizados += 1
        if atualizados <= 5:
            print(f"‚úîÔ∏è {codigo} ‚Üí {nova_categoria} / {novo_plano}")

conn.commit()

print(f"\n‚úÖ Reclassifica√ß√£o conclu√≠da com sucesso: {atualizados} registros atualizados.")
# Corre√ß√£o final de valores do plano_de_contas baseado em termos exatos
cursor.execute("SELECT codigo, plano_de_contas FROM contas_a_pagar WHERE plano_de_contas IN (?, ?, ?, ?)", (
    "Caixa",
    "Ensumos = Embalagens Fitas ETC...",
    "Escrit√≥rio",
    "Produtos de Limpeza ou manuten√ß√£o"
))
registros_finais = cursor.fetchall()
corrigidos = 0

for codigo, plano in registros_finais:
    if plano == "Caixa" or plano == "Ensumos = Embalagens Fitas ETC...":
        novo_plano = "Insumos - Embalagens"
        categoria = "Produ√ß√£o"
        tipo = "Vari√°vel"
        centro = "Embalagens"

    elif plano == "Escrit√≥rio":
        novo_plano = "Escrit√≥rio"
        categoria = "Infraestrutura"
        tipo = "Fixo"
        centro = "Administrativo"

    elif plano == "Produtos de Limpeza ou manuten√ß√£o":
        novo_plano = "Manuten√ß√£o Geral"
        categoria = "Manuten√ß√£o"
        tipo = "Vari√°vel"
        centro = "Higieniza√ß√£o"

    else:
        continue

    cursor.execute("""
        UPDATE contas_a_pagar
        SET plano_de_contas = ?, categorias = ?, tipo_custo = ?, centro_de_custo = ?
        WHERE codigo = ?
    """, (novo_plano, categoria, tipo, centro, codigo))
    corrigidos += 1
    print(f"üîß Corrigido c√≥digo {codigo} ‚Üí {novo_plano}")

conn.commit()
print(f"\n‚úÖ Corre√ß√µes finais aplicadas: {corrigidos}")
conn.close()

